/*****
Creating and running React apps

create-react-app is one popular option.
	npx create-react-app my-app
	cd my-app
	npm start

vite is another popular option.
	npm create vite@latest react-project
	cd react-project
	npm install
	npm run dev

million.js is a library to incorporate in a React app to increase performance by up to 70%
*****/



==========

/* We import images in React */

import reactImg from './assets/react-core-concepts.png';

function Header() {
	return (
		<header>
			<img src={reactImg} alt="Stylized atom" />
		</header>
	);
}

==========

/* props */

import componentsImg from './assets/components.png';

function CoreConcepts(props) {
	return (
		<li>
			<img src={props.image} alt={props.title} />
			<h3>{props.title}</h3>
			<p>{props.description}</p>
		</li>
	);
}

function App() {
	return (
		<div>
			<CoreConcept
				title="Components"
				description="The core UI building block."
				image={componentsImg}
			/>
		</div>
	);
}

==========

/* Named exports are imported with curly braces */

// File1.js
export const CORE_CONCEPTS = [
	{
		image: componentsImg,
		title: 'Components',
		description:
			'The core UI building block'
	},
];

// File2.jsx
impot { CORE_CONCEPTS } from './File1.js';

==========

/* Accessing objects in an array */

<CoreConcept
	title={CORE_CONCEPTS[0].title}
	description={CORE_CONCEPTS[0].description}
	image={CORE_CONCEPTS[0].image}
/>

/* Using spread operator to pull out all key:value pairs of an object and add them as props */

<CoreConcept {...CORE_CONCEPTS[0]} />

==========

/* Object destructuring to target different properties of the incoming object by name */

function CoreConcepts({image, title, description}) {
	return (
		<li>
			<img src={image} alt={title} />
			<h3>{title}</h3>
			<p>{description}</p>
		</li>
	);
}

==========

/* Passing a single prop object */

<CoreConcept concept={CORE_CONCEPTS[0]} />

export default function CoreConcept({ concept }) {
	// can then destructure the concept object
	const { title, description, image } = concept;
	return (
		<li>
			<img src={image} alt={title} />
			<h3>{title}</h3>
			<p>{description}</p>
		</li>
	);
}

==========

/* Children are always sent as props */

// App.jsx
<Modal>
	<h2>Warning</h2>
	<p>Do you want to delete this file?</p>
</Modal>

// Modal.jsx
function Modal(props) {
	return <div id="modal">{props.children}</div>;
}

// destructuring

export default function TabButton({children}) {
	return <li><button>{children}</button></li>;
}

// alternatively, passing as a prop

// App.jsx
<TabButton label='Components' />

//TabButton.jsx
export default function TabButton({ label }) {
	return (
		<li>
			<button>{label}</button>
		</li>
	);
}

==========

/* Passing custom arguments to event functions */

// App.jsx
function App() {
	function handleSelect(selectedButton) {
		console.log(selectedButton);
	}

	return (
		<menu>
			<TabButton onSelect={() => handleSelect('components')}>Components</TabButton>
		</menu>
	);
}

export default App;

// TabButton.jsx
export default function TabButton({ children, onSelect }) {
	return (
		<li>
			<button onClick={onSelect}>{children}</button>
		</li>
	);
}

==========

/* Fragments */

// first we import

import { Fragment } from 'react';

// then we use

return (
	<Fragment>
		<main></main>
	</Fragment>
);

// alternatively, we can just use (without importing Fragment):

return (
	<>
		<main></main>
	</>
);

==========

/* Updating state based on old state */

const [isEditing, setIsEditing] = useState(false);

// the wrong way, this schedules an update but doesn't guarantee latest state
setIsEditing(!isEditing);

// the correct way, updating based off old state value
setIsEditing(isEditing => !isEditing);

==========

/* Updating object state immutably */

// in this example, since we are dealing with nested arrays, those should be copied as well before we update
//  anything.  we can achieve this by calling the map() method on our old state (our old array), so that we've
//  got our inner arrays.  and for every inner array, we also return a new nested array which spreads the 
//  elements of that inner array inside of it.

const initialGameBoard = [
	[null, null, null],
	[null, null, null],
	[null, null, null],
];

export default function GameBoard() {
	const [gameBoard, setGameBoard] = useState(initialGameBoard);

	function handleSelectSquare(rowIndex, colIndex) {
		setGameBoard((prevGameBoard) => {
			const updatedBoard = [...prevGameBoard.map(innerArray => [...innerArray])];
			updatedBoard[rowIndex][colIndex] = 'X';
			return updatedBoard;
		});
	}

==========

/* CSS Styling with CSS Modules */

// we import CSS Modules as files
import classes from "./Header.module.css";

// conditional rendering with template literals
<label className={`label ${emailNotValid ? 'invalid' : ''}`}>Email</label>

==========

/* CSS Styling with styled-components */
//  npm install styled-components

import { styled } from 'styled-components';

// styled-components use tagged templates
const ControlContainer = styled.div`
	display: flex;
	flex-direction: column;
	gap: 0.5rem;
	margin-bottom: 1.5rem;
`

// use as a component
return (
	<ControlContainer>
		<p className="paragraph">
			Text
		</p>
	</ControlContainer>
);

==========

/* CSS Styling with Tailwind */
//  npm install -D tailwindcss postcss autoprefixer
//  npx tailwindcss init -p
// These steps change over time, so refer to Tailwind docs for latest.
// VScode has a Tailwind CSS IntelliSense plugin, for class name suggestions

// Add the paths to all of your template files in your tailwind.config.js file
// tailwind.config.js
export default {
	content: [
		"./index.html",
		"./src/**/*.{js,ts,jsx,tsc}",
	],
...

// Add the @tailwind directives to your ./src/index.css file
// index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

// utilize the built-in Tailwind class names
// Header.jsx
import logo from '../assets/logo.png';

export default function Header() {
	return (
		<header className="flex flex-col items-center mt-8 mb-16">
			<img src={logo} alt="A canvas" />
		</header>
	);
}

==========

/* Refs */

import { useRef } from 'react';

export default function Player() {
	const playerName = useRef();

	const [enteredPlayerName, setEnteredPlayerName] = useState(null);

	function handleClick() {
		setEnteredPlayerName(playerName.current.value);
	}

	return (
		<section id="player">
			<h2>Welcome {enteredPlayerName ?? 'anonymous'}</h2>
			<input ref={playerName} type="text" />
			<button onClick={handleClick}>Set Name</button>
		</section>
	);
}

==========

/* Forwarding Refs to custom components */

// TimerChallenge.jsx
import { useRef } from 'react';
import ResultModal from './ResultModal.jsx';

export default function TimerChallenger({ title, targetTime }) {
	const dialog = useRef();

	function handleStart() {
		dialog.current.showModal();
	}

	return (
		<>
			<ResultModal ref={dialog} result="lost" />
		</>
	);
}

// ResultModal.jsx
import { forwardRef } from 'react';

const ResultModal = forwardRef(function ResultModal({ propsDestructured }, ref) {
	return (
		<dialog ref={ref} className="result-modal">
			<h2>You {result}</h2>
		</dialog>
	);
})

export default ResultModal;

==========

/* useImperativeHandle */
// We'll need a seperate ref for reaching out to the dialog, in order to detach the dialog element
//  from any other outer components

// ResultModal.jsx
import { forwardRef, useImperativeHandle, useRef } from 'react';

const ResultModal = forwardRef(function ResultModal({ propsDestructured }, ref) {
	const dialog = useRef();

	useImperativeHandle(ref, () => {
		return {
			open() {
				dialog.current.showModal();
			}
		};
	});

	return (
		<dialog ref={dialog} className="result-modal">
			<h2>You {result}</h2>
		</dialog>
	);
}

// TimerChallenge.jsx
import { useRef } from 'react';
import ResultModal from './ResultModal.jsx';

export default function TimerChallenger({ title, targetTime }) {
	const dialog = useRef();

	function handleStart() {
		dialog.current.open();
	}

	return (
		<>
			<ResultModal ref={dialog} result="lost" />
		</>
	);
}

==========

/* Context API */

// sharing data across components

// create a new folder titled 'store' to keep context values/files
//  the state store for the app
//  not required, just a convention

// Contexts.js
import { createContext } from 'react';

export const ThemeContext = createContext('light');
export const AuthContext = createContext(null);


// Button.js
import { ThemeContext } from './Contexts.js';

function Button() {
  const theme = useContext(ThemeContext);
  // ...
}


// App.js
import { ThemeContext, AuthContext } from './Contexts.js';

function App() {
  // ...
  return (
    <ThemeContext.Provider value={theme}>
      <AuthContext.Provider value={currentUser}>
        <Page />
      </AuthContext.Provider>
    </ThemeContext.Provider>
  );
}

==========

/* useReducer */
 - another state management tool

'useReducer is a React Hook that lets you add a reducer to your component.'
useReducer is a hook that allows you to manage complex state logic in functional components.
useReducer is useful when you have a state that depends on multiple sub-values, or when the next state depends on the previous one.


import { useReducer } from 'react';

function reducer(state, action) {
  switch (action.type) {
    case 'incremented_age': {
      return {
        name: state.name,
        age: state.age + 1
      };
    }
    case 'changed_name': {
      return {
        name: action.nextName,
        age: state.age
      };
    }
  }
  throw Error('Unknown action: ' + action.type);
}

const initialState = { name: 'Taylor', age: 42 };

export default function Form() {
  const [state, dispatch] = useReducer(reducer, initialState);

  function handleButtonClick() {
    dispatch({ type: 'incremented_age' });
  }

  function handleInputChange(e) {
    dispatch({
      type: 'changed_name',
      nextName: e.target.value
    }); 
  }

  return (
    <>
      <input
        value={state.name}
        onChange={handleInputChange}
      />
      <button onClick={handleButtonClick}>
        Increment age
      </button>
      <p>Hello, {state.name}. You are {state.age}.</p>
    </>
  );
}

==========

/* useEffect */
// prevents infinite loops

// runs at the end of (after) the app component execution, only reruns if the dependencies change

import { useRef } from 'react';

useEffect(() => {
	// code

	// cleanup:
	return () => {
		// cleanup code
	}
}, [dependencies]);

// omitting the dependencies completely causes it to rerun every app cycle
// leaving an empty dependency array [] causes the effect to only ever run once

// For example:

useEffect(() => {
	const timer = setTimeout(() => {
		onConfirm();
	}, 3000);

	return () => {
		clearTimeout(timer);
	}
}, []);


/* When using a function as a dependency, you can create an infinite loop
    because functions are objects, and two objects even with the name contents are !=
   This is where useCallback comes into play */

import { useEffect, useCallback } from 'react';

const whatEver = useCallback(function whatEver() {
//..
}, []);

// Now the function will not be recreated in memory

==========

/* Avoiding component function executions with memo */

import { memo } from 'react';

const Counter = memo(function Counter({ initialCount }){
// ...
})

export default Counter;

/* memo() compares prop values before re-rendering.
    memo() only prevents function executions that are triggered by the parent component (i.e. App component) */

==========

/* useMemo prevents re-execution of functions within components */

import { memo, useMemo } from 'react';


const Counter = memo(function Counter({ initialCount }){
	//const initialCountIsPrime = isPrime(initialCount);
	const initialCountIsPrime = useMemo(() => isPrime(initialCount), [initialCount]);
})

export default Counter;

/* function will only execute if dependencies within array change.
    an empty array means it will never re-execute */